{% include "State.jinja" %}

{% block base_header %}
{% if 'gazebo_msgs_srv_import' not in defined_headers %}
from gazebo_msgs.srv import (
    SpawnModel,
    DeleteModel,
)
{% do defined_headers.append('gazebo_msgs_srv_import') %}
{% endif %}

{% if 'class_LoadGazeboModelState' not in defined_headers %}
class LoadGazeboModelState(smach.State):
    def __init__(self, name, model_path, input_keys = ['pose', 'reference_frame'], pose_cb = None):
        smach.State.__init__(self, input_keys=input_keys, outcomes=['succeeded'])

        self._name = name
        self._model_path = model_path
        
        # Set up a poses callback
        self._pose_cb = pose_cb

    def execute(self, userdata):
        # If a pose callback has been defined, use it to format
        # pose specified by the input keys in the userdata
        if self._pose_cb:
            pose = self._pose_cb(userdata)
        else:
            pose = userdata.pose

        # Parse pose
        if isinstance(pose, PoseStamped):
            pose = pose.pose
        elif isinstance(pose, Pose):
            pose = pose
        elif isinstance(pose, list):
            position = Point(x=pose[0][0], y=pose[0][1], z=pose[0][2])
            orientation = Quaternion(x=pose[1][0], y=pose[1][1], z=pose[1][2], w=pose[1][3])
            pose = Pose(position=position, orientation=orientation)
        else:
            return 'aborted'

        # Load model SDF/URDF XML
        model_xml = ''
        with open(self._model_path, 'r') as model_file:
            model_xml = model_file.read().replace('\n', '')

        # Spawn model SDF/URDF
        if os.path.splitext(self._model_path)[1][1:].lower() == 'sdf':
            spawn_service_type = 'sdf'
        elif os.path.splitext(self._model_path)[1][1:].lower() == 'urdf':
            spawn_service_type = 'urdf'

        try:
            spawn_service_proxy = rospy.ServiceProxy('/gazebo/spawn_sdf_model', SpawnModel)
            spawn_response = spawn_service_proxy(self._name, model_xml, "/",
                                                 pose, userdata.reference_frame)
        except rospy.ServiceException, e:
            rospy.logerr('Spawn ' + spawn_service_type.upper() + ' service call failed: {0}'.format(e))

        return 'succeeded'
{% do defined_headers.append('class_LoadGazeboModelState') %}
{% endif %}


{% if 'def_delete_gazebo_model' not in defined_headers %}
def delete_gazebo_model(model):
    try:
        delete_model = rospy.ServiceProxy('/gazebo/delete_model', DeleteModel)
        resp_delete = delete_model(model)
    except rospy.ServiceException, e:
        rospy.loginfo("Delete Model service call failed: {0}".format(e))
{% do defined_headers.append('def_delete_gazebo_model') %}
{% endif %}
{% endblock base_header %}

{% block body %}
smach.{{ parent_type }}.add('{{ name }}',
{{ '' | indent(23, true) }}LoadGazeboModelState('{{ model_name }}',
                                                {{ model_path }}){% if transitions is defined %},
{{ 'transitions=' | indent(23, true) }}{{ '{' }}{% for outcome, transition in transitions.items() | sort %}'{{ outcome }}':'{{ transition }}'{% if not loop.last %},
{{ '' | indent(36, true) }}{% endif %}{% endfor %}{{ '}' }}{% endif %}{% if remapping is defined %},
{{ 'remapping=' | indent(23, true) }}{{ '{' }}{% for state_key, userdata_key in remapping.items() | sort %}'{{ state_key }}':'{{ userdata_key }}'{% if not loop.last %},
{{ '' | indent(34, true) }}{% endif %}{% endfor %}{{ '}' }}{% endif %})
{% endblock body %}

{% block base_footer %}
rospy.on_shutdown(lambda: delete_gazebo_model('{{ model_name }}'))
{% endblock base_footer %}
